INSTALACI√ìN--
npm mongoose
npm express
nom dotenv
npm cors
npm react-hot-toast(Add beautiful notifications to your React app with react-hot-toast)
npm bcrypt
npm i jsonwebtoken
npm i cookie-parser/// cookie parser middleware function using the given secret and options
npm axios 

T√≠tulo del Proyecto: CarWash Shop -
 Servicio de lavado de coche y tambien con suscripci√≥n.

Descripci√≥n: CarWash Shop es una aplicaci√≥n en la cual ofrece servicios de lavados de coches bajo demanda y con suscripci√≥n mensual. La app deja a los usuarios solicitar lavados de coches desde cualquier lugar en lavadero de coches apto para ello. Adem√°s los usuarios puedes optar por una suscripci√≥n mensual que ofrece beneficios como lavados ilimitados, descuentos en servicios adicionales o prioridad en reservas.

Wireframe Mid-Fi:

P√°gina de Inicio: 

-Logotipo de la aplicaci√≥n ‚úÖ
-Menu Nav (Inicio,Servicios,Suscripciones,Contacto, Login/Registro)
-Secci√≥n de info sobre servicios

Registro/Login ‚úÖ
-Formulario a completar para la entrada con Email y contrase√±a.
-Bot√≥n para env√≠o para iniciar o registrar.

Perfil Usuario:
-Informaci√≥n persona (nombre, email, direcci√≥n) üó∏
-Historial de lavados.
-Estado de la suscripci√≥n y opci√≥n de actualizar o cancelar.

Seleccionar Servicios
-Lista de tipos de lavados con descripcion y precios. üó∏
-Opci√≥n para programar lavados( date & time)

Seleccion de productos 
-seleccion de productos para limpieza interior 
-seleccion de productos exterior


PAGOS-----( a al espera de antonio)

Historial 
-Lista de lavados anteriores y que realizo
-Comentarios




Dise√±o de API:
Endpoint:
-----LOGIN'S 
Post/register ----Registro de nuevos usuarios  ‚úÖ
Post/login    ----Autenticaci√≥n de usuarios  ‚úÖ
Get/Profile   ----Obtener detalles del perfil del usuario ‚úÖ
Post/logout   -----salir del perfil ‚úÖ

---------SERVICES
Get/all   ---Obtener lista de servicios de lavado disponibles ‚úÖ
POST/create-- crear la lista ‚úÖ
POST/:id-- Borrar lista ‚úÖ
POST/:id----- editar servicio ‚úÖ

--------reviews
Post/Reviews/:id   -----Crear comentario para lavado
Get/Reviews/wash/:wash_id----Obtener todos los comentarios asociados a un lavado espec√≠fico
Put/Reviews/:id ----  Actualizar un comentario existente por su ID
Delete/Reviews/:id --  Eliminar un comentario existente por su ID


Post/pagar -----  Procesar el pago de un servicio (Preguntar antonio)(npm stripe??)


Dise√±o de Base de Datos: 
MongoDB

Usuarios  ‚úÖ
const userSchema = new mongoose.Schema({
  nombre: { type: String, required: true },
  correo: { type: String, required: true, unique: true },
  contrase√±a: { type: String, required: true },
  suscripcion: { type: Boolean, default: false }
});


Servicios ‚úÖ
const serviceSchema = new mongoose.Schema({
   imagen: { type: String, required: true },
  nombre: { type: String, required: true },
  descripcion: { type: String, required: true },
  precio: { type: Number, required: true }
});

Productos ‚úÖ
const productSchema = new mongoose.Schema({
   imagen: { type: String, required: true },
  nombre: { type: String, required: true },
  descripcion: { type: String, required: true },
  precio: { type: Number, required: true }
});





Lavados
const LavadoSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  service_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Service', required: true },
  fecha: { type: Date, default: Date.now },
  ubicacion: { type: String, required: true },
  estado: { type: String, enum: ['pendiente', 'completado', 'cancelado'], default: 'pendiente' }
});


Reviews
const reviewSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  wash_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Wash', required: true },
  comentario: { type: String, required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  fecha: { type: Date, default: Date.now }
});